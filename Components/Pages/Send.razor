@page "/send"
@using System.Globalization
@using HodladiWallet.Models
@using HodladiWallet.Services
@using HodladiWallet.Components.Layout

@inject IInvoiceService InvoiceService
@inject NavigationManager NavigationManager
@inject ILightningInvoiceDecoder LightningInvoiceDecoder
@inject IJSRuntime JsRuntime

<PageTitle>Send</PageTitle>
<HeaderComponent Title="Send sats" />

<div class="@(_isLoading ? "blurred-when-loading" : "") centered-content">
	<EditForm Model="@_invoiceRequest" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />
		<div class="input-wrapper">
			<div class="input-group">
				@if (_invoiceAmount > 0)
				{
					<div>
						<div>
							<span style="font-size:28px;">
								@FormatBalanceSat(_invoiceAmount)
								<span style="color: #ff9900;">sats </span>
								to pay!
							</span>
						</div>
					</div>
				}
				<textarea placeholder="ln....." id="invoice" class="form-control borderless-input" style="font-size: 14px;"
						  @bind="@_invoiceRequest.Invoice" @oninput="HandleInvoiceChange"></textarea>
			</div>
		</div>
		<div class="mt-1 d-flex justify-content-center">
			<button type="submit" class="btn btn-outline-secondary btn-special">Pay invoice</button>
			<button @onclick="() => ScanQrCode()" class="btn btn-outline-secondary btn-special">
				<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="#FF9900" class="bi bi-camera camera-icon" viewBox="0 0 16 16">
					<path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4z" />
					<path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7M3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0" />
				</svg>
			</button>
		</div>
	</EditForm>
</div>
@if (ShowQrScanner)
{
	<div class="modal-overlay" @onclick="CloseScanner">
		<div class="modal-content" @onclick:stopPropagation>
			<div id="reader" width="300px"></div>
		</div>
	</div>
}

@if (PaymentSuccess)
{
	<div class="modal-overlay" @onclick="CloseScanner">
		<div class="modal-content" @onclick:stopPropagation>
			<div>
				<span>
					@_paymentResponse.RecipientAmountSat
				</span>
			</div>
			<div>
				<span>@_paymentResponse.RoutingFeeSat</span>
			</div>
		</div>
	</div>
}

@if (_isLoading)
{
	<div class="spinner-overlay">
		<div class="spinner-border text-light" role="status">
			<span class="sr-only"></span>
		</div>
	</div>
}


@code {

	private readonly InvoiceRequest _invoiceRequest = new();
	private PaymentResponse? _paymentResponse;
	private bool ShowQrScanner { get; set; }
	private bool PaymentSuccess { get; set; }
	private bool _isLoading;

	private async Task HandleValidSubmit()
	{
		_isLoading = true;
		try
		{
			int index = _invoiceRequest.Invoice.IndexOf("ln", StringComparison.OrdinalIgnoreCase);

			if (index > -1)
			{
				_invoiceRequest.Invoice = _invoiceRequest.Invoice.Substring(index);
			}

			_paymentResponse = await InvoiceService.ProcessPaymentAsync(_invoiceRequest);
			PaymentSuccess = true;
			NavigationManager.NavigateTo("/");
		}
		finally
		{
			_isLoading = false;
		}
	}

	private long _invoiceAmount;

	private void HandleInvoiceChange(ChangeEventArgs e)
	{
		var invoice = e.Value?.ToString();
		if (!string.IsNullOrWhiteSpace(invoice))
		{
			_invoiceAmount = LightningInvoiceDecoder.ParseInvoiceAmount(invoice);
			StateHasChanged();
		}
	}

	private async Task ScanQrCode(bool preferFrontCamera = false)
	{
		if (!string.IsNullOrWhiteSpace(_invoiceRequest.Invoice))
		{
			_invoiceRequest.Invoice = string.Empty;
			_invoiceAmount = 0;
			StateHasChanged();
		}

		ShowQrScanner = true;
		StateHasChanged();
		await Task.Delay(100);

		var dotNetReference = DotNetObjectReference.Create(this);
		await JsRuntime.InvokeVoidAsync("startQrScanner", dotNetReference, preferFrontCamera);
	}


	[JSInvokable]
	public void ReceiveQrCodeData(string data)
	{
		_invoiceRequest.Invoice = data.ToLower();
		ShowQrScanner = false;
		StopScanning();
		HandleInvoiceChange(new ChangeEventArgs() { Value = data.ToLower() });
		StateHasChanged();
	}


	private void CloseScanner()
	{
		ShowQrScanner = false;
		StopScanning();
		StateHasChanged();
	}

	private void StopScanning()
	{
		JsRuntime.InvokeVoidAsync("stopQrScanner");
	}

	private string FormatBalanceSat(long? balanceSat)
	{
		if (balanceSat.HasValue)
		{
			var cultureInfo = new CultureInfo("sv-SE");
			return balanceSat.Value.ToString("N0", cultureInfo);
		}

		return "0";
	}
}
